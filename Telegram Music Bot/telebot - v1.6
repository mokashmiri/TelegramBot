from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import time
import os

BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_CHAT_ID = -1001317756719
ADMIN_USER_ID = 27218759  # Replace with your Telegram user ID

# Load allowed users from a file or create the file if it doesn't exist
def load_allowed_users():
    try:
        with open('allowed_users.txt', 'r') as file:
            return {int(line.split(":")[0]): line.split(":")[1].strip() for line in file.readlines()}
    except FileNotFoundError:
        with open('allowed_users.txt', 'w') as file:
            pass
        return {ADMIN_USER_ID: "Admin"}  # Add admin as default

ALLOWED_USERS = load_allowed_users()

# Save allowed users back to the file
def save_allowed_users():
    with open('allowed_users.txt', 'w') as file:
        for user_id, user_name in ALLOWED_USERS.items():
            file.write(f"{user_id}: {user_name}\n")

# Command to add a new user (admin only)
async def add_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("You are not authorized to add users.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("Please provide a valid user ID and optionally a name.")
        return

    try:
        new_user_id = int(context.args[0])  # Expect the user ID to be passed as the first argument
        if new_user_id in ALLOWED_USERS:
            # User already exists
            user_name = ALLOWED_USERS.get(new_user_id, "Unknown")
            await update.message.reply_text(f"User {user_name} ({new_user_id}) is already added.")

            # Ask if the admin wants to do something else with this user
            keyboard = [
                [InlineKeyboardButton("Update Name", callback_data=f'update_name_{new_user_id}')],
                [InlineKeyboardButton("Remove User", callback_data=f'remove_user_{new_user_id}')],
                [InlineKeyboardButton("Do Nothing", callback_data='do_nothing')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"What would you like to do with user {user_name} ({new_user_id})?", reply_markup=reply_markup)
        else:
            # Adding the user
            new_user_name = " ".join(context.args[1:]) if len(context.args) > 1 else "Unknown"
            ALLOWED_USERS[new_user_id] = new_user_name
            save_allowed_users()
            await update.message.reply_text(f"User {new_user_name} ({new_user_id}) has been added.")
    except (IndexError, ValueError):
        await update.message.reply_text("Please provide a valid user ID in numeric format.")

# Command to remove a user (admin only)
async def remove_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("You are not authorized to remove users.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("Please provide a valid user ID to remove.")
        return

    try:
        user_id = int(context.args[0])
        if user_id in ALLOWED_USERS:
            removed_user_name = ALLOWED_USERS.pop(user_id)
            save_allowed_users()
            await update.message.reply_text(f"User {removed_user_name} ({user_id}) has been removed.")
        else:
            await update.message.reply_text(f"User {user_id} is not in the allowed users list.")
    except (IndexError, ValueError):
        await update.message.reply_text("Please provide a valid user ID in numeric format.")

# Command to list all users (admin only)
async def list_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("You are not authorized to view the user list.")
        return

    # Generate the list of users as a message
    users_list = '\n'.join([f"{user_id}: {user_name}" for user_id, user_name in ALLOWED_USERS.items()])
    await update.message.reply_text(f"Allowed users:\n{users_list}")

# Command to broadcast a message to all allowed users (admin only)
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("You are not authorized to broadcast messages.")
        return

    if len(context.args) == 0:
        await update.message.reply_text("Please provide a message to broadcast.")
        return

    # The message to broadcast
    broadcast_message = " ".join(context.args)

    # Send the message to all allowed users
    for user_id in ALLOWED_USERS:
        try:
            await context.bot.send_message(chat_id=user_id, text=broadcast_message)
            print(f"Message sent to user {user_id}")
        except Exception as e:
            print(f"Failed to send message to user {user_id}: {e}")

    await update.message.reply_text(f"Message broadcasted to {len(ALLOWED_USERS)} users.")

# Command to start interaction
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("Sorry, you are not authorized to use this bot.")
        return
    await update.message.reply_text('Hello! Send me a music file.')

# Additional bot commands like help, about, etc.
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = ("Use this bot to upload and categorize music files. Here's how you can use it:\n"
                 "If you want to get access to use the bot, you have to get your ID number from this bot, @myidbot (it contains 8 characters), and then send the number to the admin ID, @mokashmiri.\n"
                 "/start - Begin interacting with the bot.\n"
                 "/help - Display this message.\n"
                 "/about - Learn about this bot.\n"
                 "/report - Generate a usage report (admin only).\n"
                 "/add_user - Add a new user (admin only).\n"
                 "/remove_user - Remove an allowed user (admin only).\n"
                 "/list_users - List all allowed users (admin only).\n"
                 "/broadcast - Send a message to all users (admin only).")
    await update.message.reply_text(help_text)

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    # Register handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add_user", add_user_command))  # Admin can add users
    application.add_handler(CommandHandler("remove_user", remove_user_command))  # Admin can remove users
    application.add_handler(CommandHandler("list_users", list_users_command))  # Admin can list all users
    application.add_handler(CommandHandler("broadcast", broadcast_command))  # Admin can broadcast to all users

    application.run_polling()

if __name__ == '__main__':
    while True:
        try:
            main()
        except Exception as e:
            print(f"Error occurred: {e}")
            print("Bot restarting in 10 seconds...")
            time.sleep(10)
